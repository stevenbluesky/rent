package com.rent.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import com.rent.common.persistence.annotation.MyBatisDao;
import com.rent.condition.MasterCondition;
import com.rent.condition.MasterReletCondition;
import com.rent.condition.RenDaliyCondition;
import com.rent.condition.renAcountCondition;
import com.rent.entity.PrhMaster;
import com.rent.entity.Profile;
@MyBatisDao
public interface PrhMasterMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PRH_MASTER
     *
     * @mbggenerated Thu May 11 11:59:24 CST 2017
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PRH_MASTER
     *
     * @mbggenerated Thu May 11 11:59:24 CST 2017
     */
    int insert(PrhMaster record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PRH_MASTER
     *
     * @mbggenerated Thu May 11 11:59:24 CST 2017
     */
    int insertSelective(PrhMaster record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PRH_MASTER
     *
     * @mbggenerated Thu May 11 11:59:24 CST 2017
     */
    PrhMaster selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PRH_MASTER
     *
     * @mbggenerated Thu May 11 11:59:24 CST 2017
     */
    int updateByPrimaryKeySelective(PrhMaster record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PRH_MASTER
     *
     * @mbggenerated Thu May 11 11:59:24 CST 2017
     */
    int updateByPrimaryKey(PrhMaster record);
    /**
     * 获取当前新增id
     * @return
     */
    int getCurrId();
    
    /**
     * 根据房源id 查询 最新租户id
     * @return
     */
    PrhMaster getMasterIdBystaAndHouseId(@Param("sta")String sta, @Param("houseId")Integer HouseId);
    /**
     * 通过准入编号查找
     * @param allowInNo
     * @return 
     */
    List<PrhMaster> getByAllowInNo(String allowInNo);
    
    /**
     * 通过合同号查找
     * @param allowInNo
     * @return 
     */
    List<PrhMaster> getByContract(String contract);
    
    /**
     * 通过条件查找
     * @param allowInNo
     * @return  
     */
    List<PrhMaster> findByCondition(MasterCondition condition);
    
    /**
     * 根据条件查询条件
     * @param condition
     * @return 
     */
    Integer  getCountByCondition(MasterCondition condition);
    
    
    /**
     * 通过续租条件查找
     * @param allowInNo
     * @return  
     */
    List<PrhMaster> findByReletCondition(MasterReletCondition condition);
    
    /**
     * 根据条件查询个数
     * @param condition
     * @return 
     */
    Integer  getCountByReletCondition(MasterReletCondition condition);
    
    /**
     * 查询申请续租
     * @return
     */
    List<PrhMaster> findByReletApplyPaged(MasterReletCondition condition);
    
    /**
     * 查询申请续总数
     * @return
     */
     Integer getCountByReletApplyPaged(MasterReletCondition condition);
     
     /**
      * 查询登记记录
      * @return
      */
     List<PrhMaster> findByCheckInRecordPaged(MasterReletCondition condition);
     
     /**
      * 查询登记记录总数
      * @return
      */
      Integer getCountByCheckInRecordPaged(MasterReletCondition condition);
     
      /**
       * 查询可开卡记录
       * @return
       */
      List<PrhMaster> findCanGetCardPaged(MasterReletCondition condition);
      
     
      /**
       *  查询可开卡记录总数
       * @return
       */
      Integer getCanGetCardCount(MasterReletCondition condition);
      
      /**
       * 根据id 查询
       * 
       * @return
       */
      PrhMaster  findById(Integer id);
      
      /**
       * 根据组合条件 查询 总条数
       * 
       * @return
       */
     Integer   findCountByRenDaliyCondition(RenDaliyCondition condition);
     
     /**
      * 根据组合条件 分页查询 
      * 
      * @return
      */
     List<PrhMaster> findByRenDaliyConditionAndPaged(RenDaliyCondition condition);
     
     
   Integer   findCountByRenDaliyConditionTui(RenDaliyCondition condition);
     
     /**
      * 根据组合条件 分页查询 
      * 
      * @return
      */
     List<PrhMaster> findByRenDaliyConditionAndPagedTui(RenDaliyCondition condition);
     
     
     
     
     List<PrhMaster> findMasterByrentAccountAndPaged(renAcountCondition condition);
      
     Integer findMasterCountByrentAccount(renAcountCondition condition);
     List<PrhMaster> findByGuestNo(String guestno);
     
 	List<PrhMaster> findAllByConditionAndPaged(MasterCondition condition);
 	
 	
 	Integer findAllCountByCondition(MasterCondition condition);
 	List<PrhMaster> findHistory(String guestno);

	List<PrhMaster> findByHouseId(Integer houseid);

	List<PrhMaster> findArreaseHouse();

	Integer findCountByRenDaliyConditionTai(RenDaliyCondition condition);

	List<PrhMaster> findCountByRenDaliyConditionTaiAndPaged(RenDaliyCondition condition);

	Integer findCountByRenDaliyConditionTaiDate(RenDaliyCondition condition);

	List<PrhMaster> findCountByRenDaliyConditionTaiDateAndPaged(RenDaliyCondition condition);

	List<PrhMaster> findByRenDaliyConditionAndPagedHe(RenDaliyCondition condition);

	Integer findCountByRenDaliyConditionHe(RenDaliyCondition condition);
	
	
	List<PrhMaster> findByCusNo(@Param("cusNo") String cusNo);
	
	List<PrhMaster> findMastersByEstate(@Param("estateId")Integer estateId);
	
	Integer getLiveInGuestCount(@Param("idno")String idno);
	
	
	List<PrhMaster> findRentersExportPaged(MasterCondition condition);
	
	Integer getCountRentersExport(MasterCondition condition);
	
	List<PrhMaster> findRentersExport(MasterCondition condition);
	
	
	List<String> findAllBatchs(@Param("batch")String batch,@Param("estateId")Integer estateId);

	List<PrhMaster> findMastersByBatchs(@Param("batch")String batch,@Param("estateId")Integer estateId);

    List<PrhMaster> findMasterBySta(int id);

    List<PrhMaster> findOverdueMasterOfRenting();
}
